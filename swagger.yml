openapi: 3.0.0
info:
  title: Mapathon API
  version: 1.1.0
  description: REST API for the Mapathon project (645-1)
servers:
  - description: Local server
    url: http://localhost:4000
  - description: Production server
    url: https://backend.mapathon.ehealth.hevs.ch
tags:
  - name: POI
    description: All routes concerning Points Of Interest (POIs) (listing, creating, updating, etc.)
  - name: User
    description: All routes concerning Users (listing, getting a specific user)
  - name: Status
    description: All routes concerning the Status of a POI (listing, creating, updating, etc.)
  - name: Category
    description: All routes concerning the Categories of a POI (listing, creating, updating, etc.)
  - name: GPXFile
    description: All routes concerning GPX Files associated with a POI (listing, creating, updating, etc.)
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://mapathon.eu.auth0.com/authorize
          tokenUrl: https://mapathon.eu.auth0.com/oauth/token
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            status:
              type: number
              description: The HTTP status error code
            title:
              type: string
              description: The error message
    BaseModel:
      type: object
      properties:
        id:
          type: number
        createdAt:
          type: string
          format: "date-time"
          example: 2019-09-19T13:08:54.042Z
        updatedAt:
          type: string
          format: "date-time"
          example: 2019-09-19T13:08:54.042Z
    POI:
      allOf:
        - $ref: "#/components/schemas/BaseModel"
        - type: object
          required:
            - name
            - description
            - lat
            - lng
          properties:
            name:
              type: string
              example: Techno-PÃ´le
            description:
              type: string
              example: People are working hard here
            lat:
              type: number
              example: 46.2828233
            lng:
              type: number
              example: 7.5387541
            image:
              type: string
              example: http://www.technopole.ch/plugin/page/theme/T1/image/logo.jpg
            url:
              type: string
              example: http://technopole.ch
            Creator:
              $ref: "#/components/schemas/User"
            Status:
              $ref: "#/components/schemas/Status"
            Categories:
              type: array
              items:
                $ref: "#/components/schemas/Category"
            GPXFile:
              $ref: "#/components/schemas/GPXFile"
    User:
      type: object
      properties:
        id:
          type: string
          example: "github|123456"
        name:
          type: string
          example: "Thomas Shelby"
        picture:
          type: string
          format: uri
          example: "https://placehold.it/200?text=Thomas"
        email:
          type: string
          format: email
          example: "t.shelby@pb.co.uk"
    Status:
      allOf:
        - $ref: "#/components/schemas/BaseModel"
        - type: object
          required:
            - name
          properties:
            name:
              type: string
              example: Not Verified
            Creator:
              $ref: "#/components/schemas/User"
    Category:
      allOf:
        - $ref: "#/components/schemas/BaseModel"
        - type: object
          required:
            - name
          properties:
            name:
              type: string
              example: Business
            image:
              type: string
              example: https://fast.hevs.ch/temp/map-icons/company.png
            Creator:
              $ref: "#/components/schemas/User"
    GPXFile:
      allOf:
        - $ref: "#/components/schemas/BaseModel"
        - type: object
          required:
            - path
            - url
          properties:
            path:
              type: string
              example: /path/to/the/gpx/file/on/the/server.gpx
            url:
              type: string
              example: https://my.server.com/url/of/the/gpx/file.gpx
            Creator:
              $ref: "#/components/schemas/User"
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              status: 404
              title: The specified resource was not found
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              status: 403
              title: Forbidden
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error:
              status: 400
              title: Bad Request
security:
  - OAuth2:
      - openid
paths:
  /poi:
    get:
      tags:
        - POI
      description: Return all POIs
      parameters:
        - $ref: "#/components/parameters/groupParam"
      responses:
        200:
          description: An array of POIs
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/POI"
                  properties:
                    liked:
                      type: boolean
                    likes:
                      type: number

    post:
      tags:
        - POI
      description: Create a new POI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/POI"
            examples:
              minimal:
                description: The minimum required payload for creating a new POI (Creator is based on the user sending the request)
                value:
                  name: "ABC"
                  description: "Description of ABC"
                  lat: 46.1234567
                  lng: 7.1234567
              complete:
                description: A fully configured POI
                value:
                  name: "XYZ"
                  description: "Description of XYZ"
                  lat: 46.2345678
                  lng: 7.2345678
                  image: "http://image/related/to/the/poi.png"
                  url: "http://link.related.to/the/poi"
      responses:
        200:
          description: The newly created POI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POI"
  /poi/{id}:
    get:
      tags:
        - POI
      description: Return the POI with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the POI to fetch
          required: true
          schema:
            type: number
      responses:
        200:
          description: The POI with the given ID
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/POI"
                properties:
                  liked:
                    type: boolean
                  likes:
                    type: number
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      tags:
        - POI
      description: Update an existing POI
      parameters:
        - name: id
          in: path
          description: The ID of the POI to update
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/POI"
            examples:
              partial:
                description: Only update a given field
                value:
                  name: "Updated Name"
              full:
                description: Full POI object supplied
                value:
                  name: "ABC"
                  description: "Description of ABC"
                  lat: 46.1234567
                  lng: 7.1234567
      responses:
        200:
          description: The updated POI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POI"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - POI
      description: Delete the POI with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the POI to delete
          required: true
          schema:
            type: number
      responses:
        200:
          description: The deleted POI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POI"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
  /poi/{id}/status:
    patch:
      tags:
        - POI
      description: Affect a Status to the POI with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the POI to update with a new Status
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
            examples:
              partial:
                description: Only give the ID of the Status
                value: 1
              full:
                description: Give a full Status object
                value:
                  id: 1
                  name: "Not Verified"
                  createdAt: "2019-10-02T15:14:15.852Z"
                  updatedAt: "2019-10-02T15:14:15.852Z"
                  Creator:
                    id: "github|123456"
                    name: "Thomas Shelby"
                    picture: "https://placehold.it/200?text=Thomas"
                    email: "t.shelby@pb.co.uk"

      responses:
        200:
          description: The updated POI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POI"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
  /poi/{id}/category:
    patch:
      tags:
        - POI
      description: Affect Categories to the POI with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the POI to update with new Categories
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Category"
            examples:
              partial:
                description: Only give an array of Category IDs
                value: [3, 4]
              full:
                description: Give an array of full Category Objects
                value:
                  - id: 1,
                    name: Business
                    image: https://fast.hevs.ch/temp/map-icons/company.png
                    createdAt: 2019-10-02T15:50:52.055Z
                    updatedAt: 2019-10-02T15:50:52.055Z
                    Creator:
                      id: github|123456
                      name: Thomas Shelby
                      picture: https://placehold.it/200?text=Thomas
                      email: t.shelby@pb.co.uk
                  - id: 3
                    name: Restaurant
                    image: https://fast.hevs.ch/temp/map-icons/restaurant.png
                    createdAt: 2019-10-02T13:30:52.055Z
                    updatedAt: 2019-10-02T13:30:52.055Z
                    Creator:
                      id: github|123456
                      name: Thomas Shelby
                      picture: https://placehold.it/200?text=Thomas
                      email: t.shelby@pb.co.uk
      responses:
        200:
          description: The updated POI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POI"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
  /poi/{id}/gpx-file:
    patch:
      tags:
        - POI
      description: Affect a GPXFile to the POI with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the POI to update with a new GPXFile
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GPXFile"
            examples:
              partial:
                description: Only give the ID of the GPXFile
                value: 1
              full:
                description: Give a full GPXFile object
                value:
                  id: 1
                  path: "/path/to/gpx/file/on/server/file.gpx"
                  url: "http://server.mapathon.com/gpx/download/file.gpx"
                  createdAt: "2019-10-01T11:18:16.622Z"
                  updatedAt: "2019-10-01T11:18:16.622Z"
                  Creator:
                    id: "github|123456"
                    name: "Thomas Shelby"
                    picture: "https://placehold.it/200?text=Thomas"
                    email: "t.shelby@pb.co.uk"

      responses:
        200:
          description: The updated POI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POI"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
  /poi/{id}/like:
    patch:
      tags:
        - POI
      description: Like a POI
      parameters:
        - name: id
          in: path
          description: The ID of the POI to like (user is automatically determined)
          required: true
          schema:
            type: number
      responses:
        200:
          description: A message confirming the POI was liked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Liked
        201:
          description: A message confirming the POI was liked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Liked
        404:
          $ref: "#/components/responses/NotFound"
  /poi/{id}/unlike:
    patch:
      tags:
        - POI
      description: Remove a Like from a POI
      parameters:
        - name: id
          in: path
          description: The ID of the POI to unlike (user is automatically determined)
          required: true
          schema:
            type: number
      responses:
        200:
          description: A message confirming the POI was unliked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Unliked
        404:
          $ref: "#/components/responses/NotFound"
  /user:
    get:
      tags:
        - User
      description: Return all Users
      parameters:
        - $ref: "#/components/parameters/groupParam"
      responses:
        200:
          description: An array of Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /user/{id}:
    get:
      tags:
        - User
      description: Return the User with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the User to fetch
          required: true
          schema:
            type: string
      responses:
        200:
          description: The User with the given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /status:
    get:
      tags:
        - Status
      description: Return all Statuses
      parameters:
        - $ref: "#/components/parameters/groupParam"
      responses:
        200:
          description: An array of Statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Status"
    post:
      tags:
        - Status
      description: Create a new Status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
            examples:
              minimal:
                description: The minimum required payload for creating a new Status (Creator is based on the user sending the request)
                value:
                  name: "Validation In Progress"
      responses:
        200:
          description: The newly created Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /status/{id}:
    get:
      tags:
        - Status
      description: Return the Status with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the Status to fetch
          required: true
          schema:
            type: number
      responses:
        200:
          description: The Status with the given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
    patch:
      tags:
        - Status
      description: Update an existing Status
      parameters:
        - name: id
          in: path
          description: The ID of the Status to update
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Status"
            examples:
              basic:
                description: Only update a given field
                value:
                  name: "Updated Status Name"
      responses:
        200:
          description: The updated Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - Status
      description: Delete the Status with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the Status to delete
          required: true
          schema:
            type: number
      responses:
        200:
          description: The deleted Status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
  /category:
    get:
      tags:
        - Category
      description: Return all Categories
      parameters:
        - $ref: "#/components/parameters/groupParam"
      responses:
        200:
          description: An array of Categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      tags:
        - Category
      description: Create a new Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
            examples:
              minimal:
                description: The minimum required payload for creating a new Category (Creator is based on the user sending the request)
                value:
                  name: "Pub"
              complete:
                description: A more complete payload for creating a new Category (Creator is based on the user sending the request)
                value:
                  name: "Pub"
                  image: "http://logo.for.a/pub.png"
      responses:
        200:
          description: The newly created Category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /category/{id}:
    get:
      tags:
        - Category
      description: Return the Category with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the Category to fetch
          required: true
          schema:
            type: number
      responses:
        200:
          description: The Category with the given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
    patch:
      tags:
        - Category
      description: Update an existing Category
      parameters:
        - name: id
          in: path
          description: The ID of the Category to update
          required: true
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
            examples:
              basic:
                description: Only update a given field
                value:
                  name: "Updated Category Name"
      responses:
        200:
          description: The updated Category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - Category
      description: Delete the Category with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the Category to delete
          required: true
          schema:
            type: number
      responses:
        200:
          description: The deleted Category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
  /gpx-file:
    get:
      tags:
        - GPXFile
      description: Return all GPX Files
      parameters:
        - $ref: "#/components/parameters/groupParam"
      responses:
        200:
          description: An array of GPXFiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GPXFile"
    post:
      tags:
        - GPXFile
      description: Create a new GPXFile
      parameters:
        - $ref: "#/components/parameters/groupParam"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: The newly created GPXFile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GPXFile"
        400:
          $ref: "#/components/responses/BadRequest"
  /gpx-file/{id}:
    get:
      tags:
        - GPXFile
      description: Return the GPXFile with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the GPXFile to fetch
          required: true
          schema:
            type: number
      responses:
        200:
          description: The GPXFile with the given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GPXFile"
    delete:
      tags:
        - GPXFile
      description: Delete the GPXFile with the given ID
      parameters:
        - name: id
          in: path
          description: The ID of the GPXFile to delete
          required: true
          schema:
            type: number
      responses:
        200:
          description: The deleted GPXFile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GPXFile"
        404:
          $ref: "#/components/responses/NotFound"
        403:
          $ref: "#/components/responses/Forbidden"
  /gpx-file/download/{filename}:
    get:
      tags:
        - GPXFile
      description: Download the GPXFile with the given filename (such URLs are generated when POSTing new GPX files)
      parameters:
        - name: filename
          in: path
          description: The filename of the GPXFile to download
          required: true
          schema:
            type: string
      responses:
        200:
          description: The requested GPX File
          content:
            application/gps+xml:
              schema:
                type: string
                format: binary
